diff --git a/nixos/modules/services/misc/gitea.nix b/nixos/modules/services/misc/gitea.nix
index 160e777f1f8075..a2a8dacafad3a2 100644
--- a/nixos/modules/services/misc/gitea.nix
+++ b/nixos/modules/services/misc/gitea.nix
@@ -6,12 +6,11 @@
   ...
 }:
 
 let
   cfg = config.services.gitea;
   opt = options.services.gitea;
   exe = lib.getExe cfg.package;
+  nginx = config.services.nginx;
   pg = config.services.postgresql;
   useMysql = cfg.database.type == "mysql";
   usePostgresql = cfg.database.type == "postgres";
@@ -23,9 +22,9 @@ let
     RUN_MODE = prod
     WORK_PATH = ${cfg.stateDir}
 
-    ${generators.toINI { } cfg.settings}
+    ${lib.generators.toINI { } cfg.settings}
 
-    ${optionalString (cfg.extraConfig != null) cfg.extraConfig}
+    ${lib.optionalString (cfg.extraConfig != null) cfg.extraConfig}
   '';
 
   inherit (cfg.settings) mailer;
@@ -34,57 +33,57 @@ in
 
 {
   imports = [
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "cookieSecure" ]
       [ "services" "gitea" "settings" "session" "COOKIE_SECURE" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "disableRegistration" ]
       [ "services" "gitea" "settings" "service" "DISABLE_REGISTRATION" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "domain" ]
       [ "services" "gitea" "settings" "server" "DOMAIN" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "httpAddress" ]
       [ "services" "gitea" "settings" "server" "HTTP_ADDR" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "httpPort" ]
       [ "services" "gitea" "settings" "server" "HTTP_PORT" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "log" "level" ]
       [ "services" "gitea" "settings" "log" "LEVEL" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "log" "rootPath" ]
       [ "services" "gitea" "settings" "log" "ROOT_PATH" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "rootUrl" ]
       [ "services" "gitea" "settings" "server" "ROOT_URL" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "ssh" "clonePort" ]
       [ "services" "gitea" "settings" "server" "SSH_PORT" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "staticRootPath" ]
       [ "services" "gitea" "settings" "server" "STATIC_ROOT_PATH" ]
     )
 
-    (mkChangedOptionModule
+    (lib.mkChangedOptionModule
       [ "services" "gitea" "enableUnixSocket" ]
       [ "services" "gitea" "settings" "server" "PROTOCOL" ]
       (config: if config.services.gitea.enableUnixSocket then "http+unix" else "http")
     )
 
-    (mkRemovedOptionModule [ "services" "gitea" "ssh" "enable" ]
+    (lib.mkRemovedOptionModule [ "services" "gitea" "ssh" "enable" ]
       "It has been migrated into freeform setting services.gitea.settings.server.DISABLE_SSH. Keep in mind that the setting is inverted."
     )
-    (mkRemovedOptionModule [
+    (lib.mkRemovedOptionModule [
       "services"
       "gitea"
       "useWizard"
@@ -93,42 +92,42 @@ in
 
   options = {
     services.gitea = {
-      enable = mkOption {
+      enable = lib.mkOption {
         default = false;
-        type = types.bool;
+        type = lib.types.bool;
         description = "Enable Gitea Service.";
       };
 
-      package = mkPackageOption pkgs "gitea" { };
+      package = lib.mkPackageOption pkgs "gitea" { };
 
-      stateDir = mkOption {
+      stateDir = lib.mkOption {
         default = "/var/lib/gitea";
-        type = types.str;
+        type = lib.types.str;
         description = "Gitea data directory.";
       };
 
-      customDir = mkOption {
+      customDir = lib.mkOption {
         default = "${cfg.stateDir}/custom";
-        defaultText = literalExpression ''"''${config.${opt.stateDir}}/custom"'';
-        type = types.str;
+        defaultText = lib.literalExpression ''"''${config.${opt.stateDir}}/custom"'';
+        type = lib.types.str;
         description = "Gitea custom directory. Used for config, custom templates and other options.";
       };
 
-      user = mkOption {
-        type = types.str;
+      user = lib.mkOption {
+        type = lib.types.str;
         default = "gitea";
         description = "User account under which gitea runs.";
       };
 
-      group = mkOption {
-        type = types.str;
+      group = lib.mkOption {
+        type = lib.types.str;
         default = "gitea";
         description = "Group under which gitea runs.";
       };
 
       database = {
-        type = mkOption {
-          type = types.enum [
+        type = lib.mkOption {
+          type = lib.types.enum [
             "sqlite3"
             "mysql"
             "postgres"
@@ -138,37 +137,33 @@ in
           description = "Database engine to use.";
         };
 
-        host = mkOption {
-          type = types.str;
+        host = lib.mkOption {
+          type = lib.types.str;
           default = "127.0.0.1";
           description = "Database host address.";
         };
 
-        port = mkOption {
-          type = types.port;
+        port = lib.mkOption {
+          type = lib.types.port;
           default = if usePostgresql then pg.settings.port else 3306;
-          defaultText = literalExpression ''
-            if config.${opt.database.type} != "postgresql"
-            then 3306
-            else 5432
-          '';
+          defaultText = lib.literalExpression ''if config.${opt.database.type} != "postgresql" then 3306 else 5432'';
           description = "Database host port.";
         };
 
-        name = mkOption {
-          type = types.str;
+        name = lib.mkOption {
+          type = lib.types.str;
           default = "gitea";
           description = "Database name.";
         };
 
-        user = mkOption {
-          type = types.str;
+        user = lib.mkOption {
+          type = lib.types.str;
           default = "gitea";
           description = "Database user.";
         };
 
-        password = mkOption {
-          type = types.str;
+        password = lib.mkOption {
+          type = lib.types.str;
           default = "";
           description = ''
             The password corresponding to {option}`database.user`.
@@ -177,8 +172,8 @@ in
           '';
         };