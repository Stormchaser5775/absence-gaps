diff --git a/nixos/modules/services/misc/gitea.nix b/nixos/modules/services/misc/gitea.nix
index 160e777f1f8075..a2a8dacafad3a2 100644
--- a/nixos/modules/services/misc/gitea.nix
+++ b/nixos/modules/services/misc/gitea.nix
@@ -6,12 +6,11 @@
   ...
 }:
 
-with lib;
-
 let
   cfg = config.services.gitea;
   opt = options.services.gitea;
   exe = lib.getExe cfg.package;
+  nginx = config.services.nginx;
   pg = config.services.postgresql;
   useMysql = cfg.database.type == "mysql";
   usePostgresql = cfg.database.type == "postgres";
@@ -23,9 +22,9 @@ let
     RUN_MODE = prod
     WORK_PATH = ${cfg.stateDir}
 
-    ${generators.toINI { } cfg.settings}
+    ${lib.generators.toINI { } cfg.settings}
 
-    ${optionalString (cfg.extraConfig != null) cfg.extraConfig}
+    ${lib.optionalString (cfg.extraConfig != null) cfg.extraConfig}
   '';
 
   inherit (cfg.settings) mailer;
@@ -34,57 +33,57 @@ in
 
 {
   imports = [
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "cookieSecure" ]
       [ "services" "gitea" "settings" "session" "COOKIE_SECURE" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "disableRegistration" ]
       [ "services" "gitea" "settings" "service" "DISABLE_REGISTRATION" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "domain" ]
       [ "services" "gitea" "settings" "server" "DOMAIN" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "httpAddress" ]
       [ "services" "gitea" "settings" "server" "HTTP_ADDR" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "httpPort" ]
       [ "services" "gitea" "settings" "server" "HTTP_PORT" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "log" "level" ]
       [ "services" "gitea" "settings" "log" "LEVEL" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "log" "rootPath" ]
       [ "services" "gitea" "settings" "log" "ROOT_PATH" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "rootUrl" ]
       [ "services" "gitea" "settings" "server" "ROOT_URL" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "ssh" "clonePort" ]
       [ "services" "gitea" "settings" "server" "SSH_PORT" ]
     )
-    (mkRenamedOptionModule
+    (lib.mkRenamedOptionModule
       [ "services" "gitea" "staticRootPath" ]
       [ "services" "gitea" "settings" "server" "STATIC_ROOT_PATH" ]
     )
 
-    (mkChangedOptionModule
+    (lib.mkChangedOptionModule
       [ "services" "gitea" "enableUnixSocket" ]
       [ "services" "gitea" "settings" "server" "PROTOCOL" ]
       (config: if config.services.gitea.enableUnixSocket then "http+unix" else "http")
     )
 
-    (mkRemovedOptionModule [ "services" "gitea" "ssh" "enable" ]
+    (lib.mkRemovedOptionModule [ "services" "gitea" "ssh" "enable" ]
       "It has been migrated into freeform setting services.gitea.settings.server.DISABLE_SSH. Keep in mind that the setting is inverted."
     )
-    (mkRemovedOptionModule [
+    (lib.mkRemovedOptionModule [
       "services"
       "gitea"
       "useWizard"
@@ -93,42 +92,42 @@ in
 
   options = {
     services.gitea = {
-      enable = mkOption {
+      enable = lib.mkOption {
         default = false;
-        type = types.bool;
+        type = lib.types.bool;
         description = "Enable Gitea Service.";
       };
 
-      package = mkPackageOption pkgs "gitea" { };
+      package = lib.mkPackageOption pkgs "gitea" { };
 
-      stateDir = mkOption {
+      stateDir = lib.mkOption {
         default = "/var/lib/gitea";
-        type = types.str;
+        type = lib.types.str;
         description = "Gitea data directory.";
       };
 
-      customDir = mkOption {
+      customDir = lib.mkOption {
         default = "${cfg.stateDir}/custom";
-        defaultText = literalExpression ''"''${config.${opt.stateDir}}/custom"'';
-        type = types.str;
+        defaultText = lib.literalExpression ''"''${config.${opt.stateDir}}/custom"'';
+        type = lib.types.str;
         description = "Gitea custom directory. Used for config, custom templates and other options.";
       };
 
-      user = mkOption {
-        type = types.str;
+      user = lib.mkOption {
+        type = lib.types.str;
         default = "gitea";
         description = "User account under which gitea runs.";
       };
 
-      group = mkOption {
-        type = types.str;
+      group = lib.mkOption {
+        type = lib.types.str;
         default = "gitea";
         description = "Group under which gitea runs.";
       };
 
       database = {
-        type = mkOption {
-          type = types.enum [
+        type = lib.mkOption {
+          type = lib.types.enum [
             "sqlite3"
             "mysql"
             "postgres"
@@ -138,37 +137,33 @@ in
           description = "Database engine to use.";
         };
 
-        host = mkOption {
-          type = types.str;
+        host = lib.mkOption {
+          type = lib.types.str;
           default = "127.0.0.1";
           description = "Database host address.";
         };
 
-        port = mkOption {
-          type = types.port;
+        port = lib.mkOption {
+          type = lib.types.port;
           default = if usePostgresql then pg.settings.port else 3306;
-          defaultText = literalExpression ''
-            if config.${opt.database.type} != "postgresql"
-            then 3306
-            else 5432
-          '';
+          defaultText = lib.literalExpression ''if config.${opt.database.type} != "postgresql" then 3306 else 5432'';
           description = "Database host port.";
         };
 
-        name = mkOption {
-          type = types.str;
+        name = lib.mkOption {
+          type = lib.types.str;
           default = "gitea";
           description = "Database name.";
         };
 
-        user = mkOption {
-          type = types.str;
+        user = lib.mkOption {
+          type = lib.types.str;
           default = "gitea";
           description = "Database user.";
         };
 
-        password = mkOption {
-          type = types.str;
+        password = lib.mkOption {
+          type = lib.types.str;
           default = "";
           description = ''
             The password corresponding to {option}`database.user`.
@@ -177,8 +172,8 @@ in
           '';
         };
 
-        passwordFile = mkOption {
-          type = types.nullOr types.path;
+        passwordFile = lib.mkOption {
+          type = lib.types.nullOr lib.types.path;
           default = null;
           example = "/run/keys/gitea-dbpassword";
           description = ''
@@ -187,8 +182,8 @@ in
           '';
         };
 
-        socket = mkOption {
-          type = types.nullOr types.path;
+        socket = lib.mkOption {
+          type = lib.types.nullOr lib.types.path;
           default =
             if (cfg.database.createDatabase && usePostgresql) then
               "/run/postgresql"
@@ -196,57 +191,58 @@ in
               "/run/mysqld/mysqld.sock"
             else
               null;
-          defaultText = literalExpression "null";
+          # TODO: actually represent logic
+          defaultText = lib.literalExpression "null";
           example = "/run/mysqld/mysqld.sock";
           description = "Path to the unix socket file to use for authentication.";
         };
 
-        path = mkOption {
-          type = types.str;
+        path = lib.mkOption {
+          type = lib.types.str;
           default = "${cfg.stateDir}/data/gitea.db";
-          defaultText = literalExpression ''"''${config.${opt.stateDir}}/data/gitea.db"'';
+          defaultText = lib.literalExpression ''"''${config.${opt.stateDir}}/data/gitea.db"'';
           description = "Path to the sqlite3 database file.";
         };
 
-        createDatabase = mkOption {
-          type = types.bool;
+        createDatabase = lib.mkOption {
+          type = lib.types.bool;
           default = true;
           description = "Whether to create a local database automatically.";
         };
       };
 
       captcha = {
-        enable = mkOption {
-          type = types.bool;
+        enable = lib.mkOption {
+          type = lib.types.bool;
           default = false;
           description = ''
             Enables Gitea to display a CAPTCHA challenge on registration.
           '';
         };
 
-        secretFile = mkOption {
-          type = types.nullOr types.str;
+        secretFile = lib.mkOption {
+          type = lib.types.nullOr lib.types.str;
           default = null;
           example = "/var/lib/secrets/gitea/captcha_secret";
           description = "Path to a file containing the CAPTCHA secret key.";
         };
 
-        siteKey = mkOption {
-          type = types.nullOr types.str;
+        siteKey = lib.mkOption {
+          type = lib.types.nullOr lib.types.str;
           default = null;
           example = "my_site_key";
           description = "CAPTCHA site key to use for Gitea.";
         };
 
-        url = mkOption {
-          type = types.nullOr types.str;
+        url = lib.mkOption {
+          type = lib.types.nullOr lib.types.str;
           default = null;
           example = "https://google.com/recaptcha";
           description = "CAPTCHA url to use for Gitea. Only relevant for `recaptcha` and `mcaptcha`.";
         };
 
-        type = mkOption {
-          type = types.enum [
+        type = lib.mkOption {
+          type = lib.types.enum [
             "image"
             "recaptcha"
             "hcaptcha"
@@ -258,15 +254,15 @@ in
           description = "The type of CAPTCHA to use for Gitea.";
         };
 
-        requireForLogin = mkOption {
-          type = types.bool;
+        requireForLogin = lib.mkOption {
+          type = lib.types.bool;
           default = false;
           example = true;
           description = "Displays a CAPTCHA challenge whenever a user logs in.";
         };
 
-        requireForExternalRegistration = mkOption {
-          type = types.bool;
+        requireForExternalRegistration = lib.mkOption {
+          type = lib.types.bool;
           default = false;
           example = true;
           description = "Displays a CAPTCHA challenge for users that register externally.";
@@ -274,8 +270,8 @@ in
       };
 
       dump = {
-        enable = mkOption {
-          type = types.bool;
+        enable = lib.mkOption {
+          type = lib.types.bool;
           default = false;
           description = ''
             Enable a timer that runs gitea dump to generate backup-files of the
@@ -283,8 +279,8 @@ in
           '';
         };
 
-        interval = mkOption {
-          type = types.str;
+        interval = lib.mkOption {
+          type = lib.types.str;
           default = "04:31";
           example = "hourly";
           description = ''
@@ -295,15 +291,15 @@ in
           '';
         };
 
-        backupDir = mkOption {
-          type = types.str;
+        backupDir = lib.mkOption {
+          type = lib.types.str;
           default = "${cfg.stateDir}/dump";
-          defaultText = literalExpression ''"''${config.${opt.stateDir}}/dump"'';
+          defaultText = lib.literalExpression ''"''${config.${opt.stateDir}}/dump"'';
           description = "Path to the dump files.";
         };
 
-        type = mkOption {
-          type = types.enum [
+        type = lib.mkOption {
+          type = lib.types.enum [
             "zip"
             "rar"
             "tar"
@@ -319,8 +315,8 @@ in
           description = "Archive format used to store the dump file.";
         };
 
-        file = mkOption {
-          type = types.nullOr types.str;
+        file = lib.mkOption {
+          type = lib.types.nullOr lib.types.str;
           default = null;
           description = "Filename to be used for the dump. If `null` a default name is chosen by gitea.";
           example = "gitea-dump";
@@ -328,75 +324,75 @@ in
       };
 
       lfs = {
-        enable = mkOption {
-          type = types.bool;
+        enable = lib.mkOption {
+          type = lib.types.bool;
           default = false;
           description = "Enables git-lfs support.";
         };
 
-        contentDir = mkOption {
-          type = types.str;
+        contentDir = lib.mkOption {
+          type = lib.types.str;
           default = "${cfg.stateDir}/data/lfs";
-          defaultText = literalExpression ''"''${config.${opt.stateDir}}/data/lfs"'';
+          defaultText = lib.literalExpression ''"''${config.${opt.stateDir}}/data/lfs"'';
           description = "Where to store LFS files.";
         };
       };
 
-      appName = mkOption {
-        type = types.str;
+      appName = lib.mkOption {
+        type = lib.types.str;
         default = "gitea: Gitea Service";
         description = "Application name.";
       };
 
-      repositoryRoot = mkOption {
-        type = types.str;
+      repositoryRoot = lib.mkOption {
+        type = lib.types.str;
         default = "${cfg.stateDir}/repositories";
-        defaultText = literalExpression ''"''${config.${opt.stateDir}}/repositories"'';
+        defaultText = lib.literalExpression ''"''${config.${opt.stateDir}}/repositories"'';
         description = "Path to the git repositories.";
       };
 
-      camoHmacKeyFile = mkOption {
-        type = types.nullOr types.str;
+      camoHmacKeyFile = lib.mkOption {
+        type = lib.types.nullOr lib.types.str;
         default = null;
         example = "/var/lib/secrets/gitea/camoHmacKey";
         description = "Path to a file containing the camo HMAC key.";
       };
 
-      mailerPasswordFile = mkOption {
-        type = types.nullOr types.str;
+      mailerPasswordFile = lib.mkOption {
+        type = lib.types.nullOr lib.types.str;
         default = null;
         example = "/var/lib/secrets/gitea/mailpw";
         description = "Path to a file containing the SMTP password.";
       };
 
-      metricsTokenFile = mkOption {
-        type = types.nullOr types.str;
+      metricsTokenFile = lib.mkOption {
+        type = lib.types.nullOr lib.types.str;
         default = null;
         example = "/var/lib/secrets/gitea/metrics_token";
         description = "Path to a file containing the metrics authentication token.";
       };
 
-      minioAccessKeyId = mkOption {
-        type = types.nullOr types.str;
+      minioAccessKeyId = lib.mkOption {
+        type = lib.types.nullOr lib.types.str;
         default = null;
         example = "/var/lib/secrets/gitea/minio_access_key_id";
         description = "Path to a file containing the Minio access key id.";
       };
 
-      minioSecretAccessKey = mkOption {
-        type = types.nullOr types.str;
+      minioSecretAccessKey = lib.mkOption {
+        type = lib.types.nullOr lib.types.str;
         default = null;
         example = "/var/lib/secrets/gitea/minio_secret_access_key";
         description = "Path to a file containing the Minio secret access key.";
       };
 
-      settings = mkOption {
+      settings = lib.mkOption {
         default = { };
         description = ''
           Gitea configuration. Refer to <https://docs.gitea.io/en-us/config-cheat-sheet/>
           for details on supported values.
         '';
-        example = literalExpression ''
+        example = lib.literalExpression ''
           {
             "cron.sync_external_users" = {
               RUN_AT_START = true;
@@ -416,21 +412,21 @@ in
             };
           }
         '';
-        type = types.submodule (
+        type = lib.types.submodule (
           { config, options, ... }:
           {
             freeformType = format.type;
             options = {
               log = {
-                ROOT_PATH = mkOption {
+                ROOT_PATH = lib.mkOption {
                   default = "${cfg.stateDir}/log";
-                  defaultText = literalExpression ''"''${config.${opt.stateDir}}/log"'';
-                  type = types.str;
+                  defaultText = lib.literalExpression ''"''${config.${opt.stateDir}}/log"'';
+                  type = lib.types.str;
                   description = "Root path for log files.";
                 };
-                LEVEL = mkOption {
+                LEVEL = lib.mkOption {
                   default = "Info";
-                  type = types.enum [
+                  type = lib.types.enum [
                     "Trace"
                     "Debug"
                     "Info"
@@ -476,62 +472,92 @@ in
                 };
               };
 
+              # These are the upstream Gitea defaults which we we copied to be able to access them via the module system.
+              # https://docs.gitea.com/administration/config-cheat-sheet#picture-picture
+              picture = {
+                AVATAR_STORAGE_TYPE = lib.mkOption {
+                  type = lib.types.str;
+                  default = config.storage.STORAGE_TYPE;
+                  description = "Type of storage to use for user avatars.";
+                };
+
+                AVATAR_UPLOAD_PATH = lib.mkOption {
+                  type = lib.types.str;
+                  default = "avatars";
+                  description = "Path under which user avatars will be uploaded.";
+                };
+
+                REPOSITORY_AVATAR_STORAGE_TYPE = lib.mkOption {
+                  type = lib.types.str;
+                  default = config.storage.STORAGE_TYPE;
+                  description = "Type of storage to use for repository avatars.";
+                };
+
+                REPOSITORY_AVATAR_UPLOAD_PATH = lib.mkOption {
+                  type = lib.types.str;
+                  default = "repo-avatars";
+                  description = "Path under which repository avatars will be uploaded.";
+                };
+              };
+
               server = {
-                PROTOCOL = mkOption {
-                  type = types.enum [
+                PROTOCOL = lib.mkOption {
+                  type = lib.types.enum [
                     "http"
                     "https"
                     "fcgi"
                     "http+unix"
                     "fcgi+unix"
                   ];
-                  default = "http";
+                  default = if cfg.configureNginx then "http+unix" else "http";
+                  defaultText = lib.literalExpression ''if config.${opt.configureNginx} then "http+unix" else "http"'';
                   description = ''Listen protocol. `+unix` means "over unix", not "in addition to."'';
                 };
 
-                HTTP_ADDR = mkOption {
-                  type = types.either types.str types.path;
+                HTTP_ADDR = lib.mkOption {
+                  type = lib.types.either lib.types.str lib.types.path;
                   default =
                     if lib.hasSuffix "+unix" cfg.settings.server.PROTOCOL then "/run/gitea/gitea.sock" else "0.0.0.0";
-                  defaultText = literalExpression ''if lib.hasSuffix "+unix" cfg.settings.server.PROTOCOL then "/run/gitea/gitea.sock" else "0.0.0.0"'';
+                  defaultText = lib.literalExpression ''if lib.hasSuffix "+unix" config.${options.server.PROTOCOL} then "/run/gitea/gitea.sock" else "0.0.0.0"'';
                   description = "Listen address. Must be a path when using a unix socket.";
                 };
 
-                HTTP_PORT = mkOption {
-                  type = types.port;
+                HTTP_PORT = lib.mkOption {
+                  type = lib.types.port;
                   default = 3000;
                   description = "Listen port. Ignored when using a unix socket.";
                 };
 
-                DOMAIN = mkOption {
-                  type = types.str;
+                DOMAIN = lib.mkOption {
+                  type = lib.types.str;
                   default = "localhost";
                   description = "Domain name of your server.";
                 };
 
-                ROOT_URL = mkOption {
-                  type = types.str;
+                ROOT_URL = lib.mkOption {
+                  type = lib.types.str;
                   default = "http://${cfg.settings.server.DOMAIN}:${toString cfg.settings.server.HTTP_PORT}/";
-                  defaultText = literalExpression ''"http://''${config.services.gitea.settings.server.DOMAIN}:''${toString config.services.gitea.settings.server.HTTP_PORT}/"'';
+                  defaultText = lib.literalExpression ''"http://''${config.${options.server.DOMAIN}:''${toString config.${options.server.HTTP_PORT}/"'';
                   description = "Full public URL of gitea server.";
                 };
 
-                STATIC_ROOT_PATH = mkOption {
-                  type = types.either types.str types.path;
-                  default = cfg.package.data;
-                  defaultText = literalExpression "config.${opt.package}.data";
+                STATIC_ROOT_PATH = lib.mkOption {
+                  type = lib.types.either lib.types.str lib.types.path;
+                  default =
+                    if cfg.configureNginx then "${pkgs.compressDrvWeb cfg.package.data { }}" else "${cfg.package.data}";
+                  defaultText = lib.literalExpression ''if config.${opt.configureNginx} then ''${pkgs.compressDrvWeb config.${opt.package}.data { }} else "{config.${opt.package}.data}"'';
                   example = "/var/lib/gitea/data";
                   description = "Upper level of template and static files path.";
                 };
 
-                DISABLE_SSH = mkOption {
-                  type = types.bool;
+                DISABLE_SSH = lib.mkOption {
+                  type = lib.types.bool;
                   default = false;
                   description = "Disable external SSH feature.";
                 };
 
-                SSH_PORT = mkOption {
-                  type = types.port;
+                SSH_PORT = lib.mkOption {
+                  type = lib.types.port;
                   default = 22;
                   example = 2222;
                   description = ''
@@ -543,7 +569,7 @@ in
               };
 
               service = {
-                DISABLE_REGISTRATION = mkEnableOption "the registration lock" // {
+                DISABLE_REGISTRATION = lib.mkEnableOption "the registration lock" // {
                   description = ''
                     By default any user can create an account on this `gitea` instance.
                     This can be disabled by using this option.
@@ -555,29 +581,60 @@ in
               };
 
               session = {
-                COOKIE_SECURE = mkOption {
-                  type = types.bool;
-                  default = false;
+                COOKIE_SECURE = lib.mkOption {
+                  type = lib.types.bool;
+                  default =
+                    if cfg.configureNginx then nginx.virtualHosts.${cfg.settings.server.DOMAIN}.forceSSL else false;
+                  defaultText = lib.literalExpression ''if config.${opt.configureNginx} then config.services.nginx.virtualHosts.''${cfg.settings.server.DOMAIN}.forceSSL else false'';
                   description = ''
                     Marks session cookies as "secure" as a hint for browsers to only send
                     them via HTTPS. This option is recommend, if gitea is being served over HTTPS.
                   '';
                 };
               };
+
+              storage = {
+                STORAGE_TYPE = lib.mkOption {
+                  type = lib.types.enum [
+                    "local"
+                    "minio"
+                    "azureblob"
+                  ];
+                  default = "local";
+                  description = "Type of storage to use for uploaded blobs like attachments, avatars, archives or packages.";
+                };
+              };
             };
           }
         );
       };
 
-      extraConfig = mkOption {
-        type = with types; nullOr str;
+      configureNginx = lib.mkOption {
+        type = lib.types.bool;
+        default = false;
+        description = "Whether to configure Nginx as a reverse proxy.";
+      };
+
+      maxUploadSize = lib.mkOption {
+        type = lib.types.int;
+        # default taken from https://docs.gitea.com/administration/reverse-proxies?_highlight=nginx#nginx
+        default = 512;
+        description = ''
+          Maximum supported size for a file upload in MiB. Maximum HTTP body
+          size is set to this value for nginx. It affects attachment uploading,
+          form posting, package uploading and LFS pushing, etc.
+        '';
+      };
+
+      extraConfig = lib.mkOption {
+        type = with lib.types; nullOr str;
         default = null;
         description = "Configuration lines appended to the generated gitea configuration file.";
       };
     };
   };
 
-  config = mkIf cfg.enable {
+  config = lib.mkIf cfg.enable {
     assertions = [
       {
         assertion = cfg.database.createDatabase -> useSqlite || cfg.database.user == cfg.user;
@@ -617,25 +674,29 @@ in
 
     services.gitea.settings =
       let
-        captchaPrefix = optionalString cfg.captcha.enable (
-          {
-            image = "IMAGE";
-            recaptcha = "RECAPTCHA";
-            hcaptcha = "HCAPTCHA";
-            mcaptcha = "MCAPTCHA";
-            cfturnstile = "CF_TURNSTILE";
-          }
-          ."${cfg.captcha.type}"
-        );
+        captchaPrefix =
+          lib.optionalString cfg.captcha.enable
+            {
+              image = "IMAGE";
+              recaptcha = "RECAPTCHA";
+              hcaptcha = "HCAPTCHA";
+              mcaptcha = "MCAPTCHA";
+              cfturnstile = "CF_TURNSTILE";
+            }
+            ."${cfg.captcha.type}";
       in
       {
+        camo = lib.mkIf (cfg.camoHmacKeyFile != null) {
+          HMAC_KEY = "#hmackey#";
+        };
+
         "cron.update_checker".ENABLED = lib.mkDefault false;
 
-        database = mkMerge [
+        database = lib.mkMerge [
           {
             DB_TYPE = cfg.database.type;
           }
-          (mkIf (useMysql || usePostgresql) {
+          (lib.mkIf (useMysql || usePostgresql) {
             HOST =
               if cfg.database.socket != null then
                 cfg.database.socket
@@ -645,85 +706,88 @@ in
             USER = cfg.database.user;
             PASSWD = "#dbpass#";
           })
-          (mkIf useSqlite {
+          (lib.mkIf useSqlite {
             PATH = cfg.database.path;
           })
-          (mkIf usePostgresql {
+          (lib.mkIf usePostgresql {
             SSL_MODE = "disable";
           })
         ];
 
-        repository = {
-          ROOT = cfg.repositoryRoot;
+        lfs = lib.mkIf cfg.lfs.enable {
+          PATH = cfg.lfs.contentDir;
         };
 
-        server = mkIf cfg.lfs.enable {
-          LFS_START_SERVER = true;
-          LFS_JWT_SECRET = "#lfsjwtsecret#";
+        mailer = lib.mkIf (cfg.mailerPasswordFile != null) {
+          PASSWD = "#mailerpass#";
         };
 
-        camo = mkIf (cfg.camoHmacKeyFile != null) {
-          HMAC_KEY = "#hmackey#";
+        metrics = lib.mkIf (cfg.metricsTokenFile != null) {
+          TOKEN = "#metricstoken#";
         };
 
-        session = {
-          COOKIE_NAME = lib.mkDefault "session";
+        oauth2 = {
+          JWT_SECRET = "#oauth2jwtsecret#";
         };
 
-        security = {
-          SECRET_KEY = "#secretkey#";
-          INTERNAL_TOKEN = "#internaltoken#";
-          INSTALL_LOCK = true;
+        packages.CHUNKED_UPLOAD_PATH = "${cfg.stateDir}/tmp/package-upload";
+
+        repository = {
+          ROOT = cfg.repositoryRoot;
         };
 
-        service = mkIf cfg.captcha.enable (mkMerge [
-          {
-            ENABLE_CAPTCHA = true;
-            CAPTCHA_TYPE = cfg.captcha.type;
-            REQUIRE_CAPTCHA_FOR_LOGIN = cfg.captcha.requireForLogin;
-            REQUIRE_EXTERNAL_REGISTRATION_CAPTCHA = cfg.captcha.requireForExternalRegistration;
-          }
-          (mkIf (cfg.captcha.secretFile != null) {
-            "${captchaPrefix}_SECRET" = "#captchasecret#";
+        server = lib.mkMerge [
+          (lib.mkIf cfg.configureNginx {
+            STATIC_URL_PREFIX = lib.mkDefault "/static";
           })
-          (mkIf (cfg.captcha.siteKey != null) {
-            "${captchaPrefix}_SITEKEY" = cfg.captcha.siteKey;
+          (lib.mkIf cfg.lfs.enable {
+            LFS_START_SERVER = true;
+            LFS_JWT_SECRET = "#lfsjwtsecret#";
           })
-          (mkIf (cfg.captcha.url != null) {
-            "${captchaPrefix}_URL" = cfg.captcha.url;
-          })
-        ]);
-
-        mailer = mkIf (cfg.mailerPasswordFile != null) {
-          PASSWD = "#mailerpass#";
-        };
-
-        metrics = mkIf (cfg.metricsTokenFile != null) {
-          TOKEN = "#metricstoken#";
-        };
+        ];
 
-        oauth2 = {
-          JWT_SECRET = "#oauth2jwtsecret#";
+        session = {
+          COOKIE_NAME = lib.mkDefault "session";
         };
 
-        lfs = mkIf cfg.lfs.enable {
-          PATH = cfg.lfs.contentDir;
+        security = {
+          SECRET_KEY = "#secretkey#";
+          INTERNAL_TOKEN = "#internaltoken#";
+          INSTALL_LOCK = true;
         };
 
-        packages.CHUNKED_UPLOAD_PATH = "${cfg.stateDir}/tmp/package-upload";
+        service = lib.mkIf cfg.captcha.enable (
+          lib.mkMerge [
+            {
+              ENABLE_CAPTCHA = true;
+              CAPTCHA_TYPE = cfg.captcha.type;
+              REQUIRE_CAPTCHA_FOR_LOGIN = cfg.captcha.requireForLogin;
+              REQUIRE_EXTERNAL_REGISTRATION_CAPTCHA = cfg.captcha.requireForExternalRegistration;
+            }
+            (lib.mkIf (cfg.captcha.secretFile != null) {
+              "${captchaPrefix}_SECRET" = "#captchasecret#";
+            })
+            (lib.mkIf (cfg.captcha.siteKey != null) {
+              "${captchaPrefix}_SITEKEY" = cfg.captcha.siteKey;
+            })
+            (lib.mkIf (cfg.captcha.url != null) {
+              "${captchaPrefix}_URL" = cfg.captcha.url;
+            })
+          ]
+        );
 
-        storage = mkMerge [
-          (mkIf (cfg.minioAccessKeyId != null) {
+        storage = lib.mkMerge [
+          (lib.mkIf (cfg.minioAccessKeyId != null) {
             MINIO_ACCESS_KEY_ID = "#minioaccesskeyid#";
           })
-          (mkIf (cfg.minioSecretAccessKey != null) {
+          (lib.mkIf (cfg.minioSecretAccessKey != null) {
             MINIO_SECRET_ACCESS_KEY = "#miniosecretaccesskey#";
           })
         ];
       };
 
-    services.postgresql = optionalAttrs (usePostgresql && cfg.database.createDatabase) {
-      enable = mkDefault true;
+    services.postgresql = lib.mkIf (usePostgresql && cfg.database.createDatabase) {
+      enable = lib.mkDefault true;
 
       ensureDatabases = [ cfg.database.name ];
       ensureUsers = [
@@ -734,9 +798,9 @@ in
       ];
     };
 
-    services.mysql = optionalAttrs (useMysql && cfg.database.createDatabase) {
-      enable = mkDefault true;
-      package = mkDefault pkgs.mariadb;
+    services.mysql = lib.mkIf (useMysql && cfg.database.createDatabase) {
+      enable = lib.mkDefault true;
+      package = lib.mkDefault pkgs.mariadb;
 
       ensureDatabases = [ cfg.database.name ];
       ensureUsers = [
@@ -749,6 +813,97 @@ in
       ];
     };
 
+    services.nginx = lib.mkIf cfg.configureNginx {
+      enable = true;
+      upstreams = {
+        "gitea" = {
+          servers = {
+            ${
+              if (cfg.settings.server.PROTOCOL == "http+unix") then
+                "unix:${cfg.settings.server.HTTP_ADDR}"
+              else
+                "127.0.0.1:${toString cfg.httpPort}"
+            } =
+              {
+                fail_timeout = "0";
+              };
+          };
+        };
+      };
+      virtualHosts."${cfg.settings.server.DOMAIN}" = {
+        root = "${cfg.customDir}/public";
+        locations =
+          let
+            nginxCommonHeaders =
+              lib.optionalString nginx.virtualHosts.${cfg.settings.server.DOMAIN}.forceSSL ''
+                more_set_headers "Strict-Transport-Security: max-age=31536000";
+              ''
+              +
+                lib.optionalString
+                  (
+                    nginx.virtualHosts.${cfg.settings.server.DOMAIN}.quic
+                    && nginx.virtualHosts.${cfg.settings.server.DOMAIN}.http3
+                  )
+                  ''
+                    more_set_headers 'Alt-Svc: h3=":$server_port"; ma=604800';
+                  '';
+          in
+          {
+            "/" = {
+              priority = 100;
+              tryFiles = "$uri @gitea";
+              extraConfig = nginxCommonHeaders;
+            };
+
+            "^~ /avatars/" = lib.mkIf (cfg.settings.picture.AVATAR_STORAGE_TYPE == "local") {
+              alias = "${cfg.stateDir}/data/${cfg.settings.picture.AVATAR_UPLOAD_PATH}/";
+              priority = 200;
+              tryFiles = "$uri =404";
+              extraConfig =
+                ''
+                  default_type "image";
+                  more_set_headers "Cache-Control: public, max-age=604800, must-revalidate";
+                ''
+                + nginxCommonHeaders;
+            };
+
+            "^~ /repo-avatars/" = lib.mkIf (cfg.settings.picture.REPOSITORY_AVATAR_STORAGE_TYPE == "local") {
+              alias = "${cfg.stateDir}/data/${cfg.settings.picture.REPOSITORY_AVATAR_UPLOAD_PATH}/";
+              priority = 210;
+              tryFiles = "$uri =404";
+              extraConfig =
+                ''
+                  default_type "image";
+                  more_set_headers "Cache-Control: public, max-age=604800, must-revalidate";
+                ''
+                + nginxCommonHeaders;
+            };
+
+            "^~ ${cfg.settings.server.STATIC_URL_PREFIX}/assets/" = {
+              alias = "${cfg.settings.server.STATIC_ROOT_PATH}/public/assets/";
+              priority = 220;
+              tryFiles = "$uri =404";
+              extraConfig =
+                ''
+                  more_set_headers "Cache-Control: public, max-age=604800, must-revalidate";
+                ''
+                + nginxCommonHeaders;
+            };
+
+            "@gitea" = {
+              priority = 300;
+              proxyPass = "http://gitea";
+              recommendedProxySettings = true;
+              extraConfig =
+                ''
+                  client_max_body_size ${toString cfg.maxUploadSize}M;
+                ''
+                + nginxCommonHeaders;
+            };
+          };
+      };
+    };
+
     systemd.tmpfiles.rules =
       [
         "d '${cfg.dump.backupDir}' 0750 ${cfg.user} ${cfg.group} - -"
@@ -757,6 +912,7 @@ in
         "z '${cfg.repositoryRoot}' 0750 ${cfg.user} ${cfg.group} - -"
         "d '${cfg.stateDir}' 0750 ${cfg.user} ${cfg.group} - -"
         "d '${cfg.stateDir}/conf' 0750 ${cfg.user} ${cfg.group} - -"
+        "d '${cfg.customDir}/public' 0750 ${cfg.user} ${cfg.group} - -"
         "d '${cfg.customDir}' 0750 ${cfg.user} ${cfg.group} - -"
         "d '${cfg.customDir}/conf' 0750 ${cfg.user} ${cfg.group} - -"
         "d '${cfg.stateDir}/data' 0750 ${cfg.user} ${cfg.group} - -"
@@ -766,6 +922,7 @@ in
         "z '${cfg.stateDir}/conf' 0750 ${cfg.user} ${cfg.group} - -"
         "z '${cfg.customDir}' 0750 ${cfg.user} ${cfg.group} - -"
         "z '${cfg.customDir}/conf' 0750 ${cfg.user} ${cfg.group} - -"
+        "z '${cfg.customDir}/public' 0750 ${cfg.user} ${cfg.group} - -"
         "z '${cfg.stateDir}/data' 0750 ${cfg.user} ${cfg.group} - -"
         "z '${cfg.stateDir}/log' 0750 ${cfg.user} ${cfg.group} - -"
 
@@ -783,11 +940,11 @@ in
       description = "gitea";
       after =
         [ "network.target" ]
-        ++ optional usePostgresql "postgresql.target"
-        ++ optional useMysql "mysql.service";
+        ++ lib.optional usePostgresql "postgresql.target"
+        ++ lib.optional useMysql "mysql.service";
       requires =
-        optional (cfg.database.createDatabase && usePostgresql) "postgresql.target"
-        ++ optional (cfg.database.createDatabase && useMysql) "mysql.service";
+        lib.optional (cfg.database.createDatabase && usePostgresql) "postgresql.target"
+        ++ lib.optional (cfg.database.createDatabase && useMysql) "mysql.service";
       wantedBy = [ "multi-user.target" ];
       path = [
         cfg.package
@@ -902,6 +1059,7 @@ in
         # Proc filesystem
         ProcSubset = "pid";
         ProtectProc = "invisible";
+        ReadOnlyPaths = [ "${cfg.customDir}/public" ];
         # Access write directories
         ReadWritePaths = [
           cfg.customDir
@@ -959,7 +1117,7 @@ in
       };
     };
 
-    users.users = mkIf (cfg.user == "gitea") {
+    users.users = lib.mkIf (cfg.user == "gitea") {
       gitea = {
         description = "Gitea Service";
         home = cfg.stateDir;
@@ -969,24 +1127,26 @@ in
       };
     };
 
-    users.groups = mkIf (cfg.group == "gitea") {
-      gitea = { };
+    users.groups = lib.mkIf (cfg.group == "gitea") {
+      gitea = {
+        members = lib.optional cfg.configureNginx nginx.user;
+      };
     };
 
     warnings =
-      optional (cfg.database.password != "")
-        "config.services.gitea.database.password will be stored as plaintext in the Nix store. Use database.passwordFile instead."
-      ++ optional (cfg.extraConfig != null) ''
+      lib.optional (cfg.database.password != "")
+        "config.${opt.database.password} will be stored as plaintext in the Nix store. Use database.passwordFile instead."
+      ++ lib.optional (cfg.extraConfig != null) ''
         services.gitea.`extraConfig` is deprecated, please use services.gitea.`settings`.
       ''
-      ++ optional (lib.getName cfg.package == "forgejo") ''
+      ++ lib.optional (lib.getName cfg.package == "forgejo") ''
         Running forgejo via services.gitea.package is no longer supported.
         Please use services.forgejo instead.
         See https://nixos.org/manual/nixos/unstable/#module-forgejo for migration instructions.
       '';
 
     # Create database passwordFile default when password is configured.
-    services.gitea.database.passwordFile = mkDefault (
+    services.gitea.database.passwordFile = lib.mkDefault (
       toString (
         pkgs.writeTextFile {
           name = "gitea-database-password";
@@ -995,7 +1155,7 @@ in
       )
     );
 
-    systemd.services.gitea-dump = mkIf cfg.dump.enable {
+    systemd.services.gitea-dump = lib.mkIf cfg.dump.enable {
       description = "gitea dump";
       after = [ "gitea.service" ];
       path = [ cfg.package ];
@@ -1012,12 +1172,12 @@ in
         User = cfg.user;
         ExecStart =
           "${exe} dump --type ${cfg.dump.type}"
-          + optionalString (cfg.dump.file != null) " --file ${cfg.dump.file}";
+          + lib.optionalString (cfg.dump.file != null) " --file ${cfg.dump.file}";
         WorkingDirectory = cfg.dump.backupDir;
       };
     };
 
-    systemd.timers.gitea-dump = mkIf cfg.dump.enable {
+    systemd.timers.gitea-dump = lib.mkIf cfg.dump.enable {
       description = "Update timer for gitea-dump";
       partOf = [ "gitea-dump.service" ];
       wantedBy = [ "timers.target" ];
diff --git a/nixos/tests/gitea.nix b/nixos/tests/gitea.nix
index eb16c474299365..a2b37166b63cb8 100644
--- a/nixos/tests/gitea.nix
+++ b/nixos/tests/gitea.nix
@@ -23,6 +23,9 @@ let
     -----END PGP PRIVATE KEY BLOCK-----
   '';
   signingPrivateKeyId = "4D642DE8B678C79D";
+  hosts = nodes: ''
+    ${nodes.server.networking.primaryIPAddress} gitea.test
+  '';
 
   supportedDbTypes = [
     "mysql"
@@ -34,24 +37,38 @@ let
     nameValuePair type (makeTest {
       name = "${giteaPackage.pname}-${type}";
       meta.maintainers = with maintainers; [
-        aanderse
-        kolaente
+        SuperSandro2000
+        techknowlogick
       ];
 
       nodes = {
         server =
-          { config, pkgs, ... }:
+          {
+            nodes,
+            pkgs,
+            ...
+          }:
           {
             virtualisation.memorySize = 2047;
+            networking.extraHosts = hosts nodes;
+            networking.firewall.allowedTCPPorts = [ 80 ];
             services.gitea = {
               enable = true;
               database = { inherit type; };
               package = giteaPackage;
+              configureNginx = true;
               metricsTokenFile = (pkgs.writeText "metrics_secret" "fakesecret").outPath;
-              settings.service.DISABLE_REGISTRATION = true;
-              settings."repository.signing".SIGNING_KEY = signingPrivateKeyId;
-              settings.actions.ENABLED = true;
-              settings.metrics.ENABLED = true;
+              settings = {
+                "repository.signing".SIGNING_KEY = signingPrivateKeyId;
+                actions.ENABLED = true;
+                metrics.ENABLED = true;
+                picture.DISABLE_GRAVATAR = true;
+                server = {
+                  DOMAIN = "gitea.test";
+                  ROOT_URL = "http://gitea.test";
+                };
+                service.DISABLE_REGISTRATION = true;
+              };
             };
             environment.systemPackages = [
               giteaPackage
@@ -66,7 +83,7 @@ let
               configuration.services.gitea-actions-runner.instances."test" = {
                 enable = true;
                 name = "ci";
-                url = "http://localhost:3000";
+                url = "http://gitea.test";
                 labels = [
                   # don't require docker/podman
                   "native:host"
@@ -76,14 +93,27 @@ let
             };
           };
         client1 =
-          { config, pkgs, ... }:
+          {
+            nodes,
+            pkgs,
+            ...
+          }:
           {
             environment.systemPackages = [ pkgs.git ];
+            networking.extraHosts = hosts nodes;
           };
         client2 =
-          { config, pkgs, ... }:
           {
-            environment.systemPackages = [ pkgs.git ];
+            nodes,
+            pkgs,
+            ...
+          }:
+          {
+            environment.systemPackages = with pkgs; [
+              git
+              jq
+            ];
+            networking.extraHosts = hosts nodes;
           };
       };
 
@@ -95,7 +125,7 @@ let
         in
         ''
           GIT_SSH_COMMAND = "ssh -i $HOME/.ssh/privk -o StrictHostKeyChecking=no"
-          REPO = "gitea@server:test/repo"
+          REPO = "gitea@gitea.test:test/repo"
           PRIVK = "${snakeOilPrivateKey}"
 
           start_all()
@@ -107,47 +137,48 @@ let
           client1.succeed("git -C /tmp/repo init")
           client1.succeed("echo hello world > /tmp/repo/testfile")
           client1.succeed("git -C /tmp/repo add .")
-          client1.succeed("git config --global user.email test@localhost")
+          client1.succeed("git config --global user.email test@gitea.test")
           client1.succeed("git config --global user.name test")
           client1.succeed("git -C /tmp/repo commit -m 'Initial import'")
           client1.succeed(f"git -C /tmp/repo remote add origin {REPO}")
 
           server.wait_for_unit("gitea.service")
-          server.wait_for_open_port(3000)
           server.wait_for_open_port(22)
-          server.succeed("curl --fail http://localhost:3000/")
+          server.wait_for_open_port(80)
+          server.wait_for_file("/run/gitea/gitea.sock")
+          server.succeed("curl --fail http://gitea.test/")
 
           server.succeed(
               "su -l gitea -c 'gpg --homedir /var/lib/gitea/data/home/.gnupg "
               + "--import ${toString (pkgs.writeText "gitea.key" signingPrivateKey)}'"
           )
 
-          assert "BEGIN PGP PUBLIC KEY BLOCK" in server.succeed("curl http://localhost:3000/api/v1/signing-key.gpg")
+          assert "BEGIN PGP PUBLIC KEY BLOCK" in server.succeed("curl http://gitea.test/api/v1/signing-key.gpg")
 
           server.succeed(
-              "curl --fail http://localhost:3000/user/sign_up | grep 'Registration is disabled. "
+              "curl --fail http://gitea.test/user/sign_up | grep 'Registration is disabled. "
               + "Please contact your site administrator.'"
           )
           server.succeed(
               "su -l gitea -c 'GITEA_WORK_DIR=/var/lib/gitea gitea admin user create "
-              + "--username test --password totallysafe --email test@localhost'"
+              + "--username test --password totallysafe --email test@gitea.test'"
           )
 
           api_token = server.succeed(
-              "curl --fail -X POST http://test:totallysafe@localhost:3000/api/v1/users/test/tokens "
+              "curl --fail -X POST http://test:totallysafe@gitea.test/api/v1/users/test/tokens "
               + "-H 'Accept: application/json' -H 'Content-Type: application/json' -d "
               + "'{\"name\":\"token\",\"scopes\":[\"all\"]}' | jq '.sha1' | xargs echo -n"
           )
 
           server.succeed(
-              "curl --fail -X POST http://localhost:3000/api/v1/user/repos "
+              "curl --fail -X POST http://gitea.test/api/v1/user/repos "
               + "-H 'Accept: application/json' -H 'Content-Type: application/json' "
               + f"-H 'Authorization: token {api_token}'"
               + ' -d \'{"auto_init":false, "description":"string", "license":"mit", "name":"repo", "private":false}\'''
           )
 
           server.succeed(
-              "curl --fail -X POST http://localhost:3000/api/v1/user/keys "
+              "curl --fail -X POST http://gitea.test/api/v1/user/keys "
               + "-H 'Accept: application/json' -H 'Content-Type: application/json' "
               + f"-H 'Authorization: token {api_token}'"
               + ' -d \'{"key":"${snakeOilPublicKey}","read_only":true,"title":"SSH"}\'''
@@ -163,15 +194,23 @@ let
           client2.succeed(f"GIT_SSH_COMMAND='{GIT_SSH_COMMAND}' git clone {REPO}")
           client2.succeed('test "$(cat repo/testfile | xargs echo -n)" = "hello world"')
 
+          client1.succeed(
+              "curl --fail http://gitea.test/static/assets/img/favicon.png --output /dev/null"
+          )
+
+          client2.succeed(
+              "curl --fail $(curl http://gitea.test/api/v1/users/test 2> /dev/null | jq -r .avatar_url) --output /dev/null"
+          )
+
           server.wait_until_succeeds(
-              'test "$(curl http://localhost:3000/api/v1/repos/test/repo/commits '
+              'test "$(curl http://gitea.test/api/v1/repos/test/repo/commits '
               + '-H "Accept: application/json" | jq length)" = "1"'
           )
 
           with subtest("Testing metrics endpoint"):
               server.succeed('curl '
                              + '-H "Authorization: Bearer fakesecret" '
-                             + 'http://localhost:3000/metrics '
+                             + 'http://gitea.test/metrics '
                              + '| grep gitea_accesses')
 
           with subtest("Testing runner registration"):
